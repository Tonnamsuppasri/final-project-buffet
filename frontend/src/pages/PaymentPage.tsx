import { useState, useEffect, useCallback, type FormEvent } from 'react'; // ‚úÖ 1. ‡πÄ‡∏û‡∏¥‡πà‡∏° useCallback
import axios from 'axios';
import './PaymentPage.css'; // ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå CSS ‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß
import { socket } from '../components/menu'; // ‚úÖ 1. Import socket


// --- Interfaces (‡∏£‡∏ß‡∏°‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á 2 ‡πÑ‡∏ü‡∏•‡πå) ---
interface PaymentHistoryItem {
    payment_id: number;
    order_id: number;
    payment_time: string;
    total_price: number;
    payment_method: string;
    table_number: number;
    customer_quantity: number;
}

interface PaymentDetails {
    payment_id: number;
    order_id: number;
    payment_time: string;
    total_price: string;
    payment_method: string;
    customer_quantity: number;
    service_type: string;
    start_time: string;
    table_number: number;
    plan_name: string;
}

interface MenuItem {
    quantity: number;
    price_per_item: string;
    menu_name: string;
}

interface PaymentDetailData {
    details: PaymentDetails;
    menuItems: MenuItem[];
}

// --- Main Component ---
const PaymentPage = () => {
    // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    const [view, setView] = useState<'list' | 'detail'>('list');
    const [selectedPaymentId, setSelectedPaymentId] = useState<number | null>(null);

    // URL ‡∏Ç‡∏≠‡∏á API
    const apiUrl = 'http://localhost:3001';

    // --- Helper Function ---
    const formatDateTime = (isoString: string, style: 'short' | 'medium' = 'short') => {
        if (!isoString) return 'N/A';
        const date = new Date(isoString);
        if (style === 'short') {
            return date.toLocaleString('th-TH', {
                year: 'numeric', month: 'short', day: 'numeric',
                hour: '2-digit', minute: '2-digit',
            });
        }
        return date.toLocaleString('th-TH', {
            dateStyle: 'medium',
            timeStyle: 'short',
        });
    };

    // =================================================================
    // View: List (Payment History)
    // =================================================================
    const [payments, setPayments] = useState<PaymentHistoryItem[]>([]);
    const [listLoading, setListLoading] = useState(true);
    const [listError, setListError] = useState<string | null>(null);
    const [searchTerm, setSearchTerm] = useState('');
    const [startDate, setStartDate] = useState('');
    const [endDate, setEndDate] = useState('');

    // ‚úÖ 3. ‡∏´‡∏∏‡πâ‡∏° fetchPayments ‡∏î‡πâ‡∏ß‡∏¢ useCallback
    const fetchPayments = useCallback(async () => {
        setListLoading(true);
        try {
            const params = new URLSearchParams();
            if (searchTerm) params.append('searchTerm', searchTerm);
            if (startDate) params.append('startDate', startDate);
            if (endDate) params.append('endDate', endDate);
            
            const response = await axios.get<PaymentHistoryItem[]>(`${apiUrl}/api/payments`, { params });
            setPayments(response.data);
            setListError(null);
        } catch (err) {
            setListError("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ");
        } finally {
            setListLoading(false);
        }
    }, [apiUrl, searchTerm, startDate, endDate]); // ‡∏£‡∏∞‡∏ö‡∏∏ dependencies

    // ‚úÖ 4. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç useEffect ‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏£‡∏ß‡∏° Socket.IO
    useEffect(() => {
        if (view === 'list') {
            // 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å (‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠ filter ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô)
            fetchPayments();

            // 2. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Socket
            const handleNewPayment = () => {
                console.log('üéâ Socket event: new_payment. Refetching payment list...');
                // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å fetchPayments() ‡∏ã‡∏∂‡πà‡∏á‡∏à‡∏∞‡πÉ‡∏ä‡πâ filter ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                fetchPayments();
            };

            // 3. ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡∏±‡∏Å‡∏ü‡∏±‡∏á
            socket.on('new_payment', handleNewPayment);

            // 4. Cleanup: ‡∏´‡∏¢‡∏∏‡∏î‡∏î‡∏±‡∏Å‡∏ü‡∏±‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠ unmount ‡∏´‡∏£‡∏∑‡∏≠ view ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
            return () => {
                socket.off('new_payment', handleNewPayment);
            };
        }
    }, [view, fetchPayments]); // ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠ view ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ filter ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô

    const handleSearch = (e: React.FormEvent) => {
        e.preventDefault();
        fetchPayments();
    };

    const handleRowClick = (paymentId: number) => {
        setSelectedPaymentId(paymentId);
        setView('detail');
    };

    // =================================================================
    // View: Detail (Payment Detail)
    // =================================================================
    const [detailData, setDetailData] = useState<PaymentDetailData | null>(null);
    const [detailLoading, setDetailLoading] = useState(true);
    const [detailError, setDetailError] = useState<string | null>(null);

    useEffect(() => {
        if (view === 'detail' && selectedPaymentId) {
            const fetchPaymentDetail = async () => {
                setDetailLoading(true);
                try {
                    const response = await axios.get<PaymentDetailData>(`${apiUrl}/api/payments/${selectedPaymentId}`);
                    setDetailData(response.data);
                    setDetailError(null);
                } catch (err) {
                    setDetailError("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î");
                } finally {
                    setDetailLoading(false);
                }
            };
            fetchPaymentDetail();
        }
    }, [view, selectedPaymentId]); // ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°

    const handleBackToList = () => {
        setView('list');
        setSelectedPaymentId(null);
        setDetailData(null); // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
    };

    // --- Render Logic ---
    if (view === 'list') {
        return (
            <div className="payment-history-container">
                <h1 className="text-4xl font-bold mb-6">‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</h1>
                <form onSubmit={handleSearch} className="search-form mb-6">
                    <input type="text" placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Order ID, ‡πÇ‡∏ï‡πä‡∏∞, ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á..." className="search-input" value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} />
                    <input type="date" className="date-input" value={startDate} onChange={(e) => setStartDate(e.target.value)} />
                    <input type="date" className="date-input" value={endDate} onChange={(e) => setEndDate(e.target.value)} />
                    <button type="submit" className="search-button">‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤</button>
                </form>

                {listError && <p className="error-message">{listError}</p>}

                <div className="table-wrapper">
                    <table className="payment-table">
                        <thead>
                            <tr>
                                <th>Order ID</th>
                                <th>‡πÇ‡∏ï‡πä‡∏∞</th>
                                <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</th>
                                <th>‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ä‡∏≥‡∏£‡∏∞</th>
                                <th>‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á</th>
                                <th style={{ textAlign: 'right' }}>‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏° (‡∏ö‡∏≤‡∏ó)</th>
                            </tr>
                        </thead>
                        <tbody>
                            {listLoading ? (
                                <tr><td colSpan={6} className="loading-cell">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</td></tr>
                            ) : payments.length > 0 ? (
                                payments.map((payment) => (
                                    <tr key={payment.payment_id} onClick={() => handleRowClick(payment.payment_id)} className="clickable-row">
                                        <td>#{payment.order_id}</td>
                                        <td>{payment.table_number}</td>
                                        <td>{payment.customer_quantity} ‡∏Ñ‡∏ô</td>
                                        <td>{formatDateTime(payment.payment_time, 'short')}</td>
                                        <td>{payment.payment_method || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</td>
                                        <td className="price-cell">{Number(payment.total_price).toLocaleString('th-TH', { minimumFractionDigits: 2 })}</td>
                                    </tr>
                                ))
                            ) : (
                                <tr><td colSpan={6} className="no-results-cell">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</td></tr>
                            )}
                        </tbody>
                    </table>
                </div>
            </div>
        );
    }

    if (view === 'detail') {
        return (
            <div className="payment-detail-container">
                <button onClick={handleBackToList} className="back-link">
                    &larr; ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
                </button>

                {detailLoading && <h1 className="text-3xl font-bold mt-4">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î...</h1>}
                {detailError && <h1 className="text-3xl font-bold text-red-500 mt-4">{detailError}</h1>}
                
                {detailData && (
                    <>
                        <h1 className="text-4xl font-bold mt-4 mb-6">
                            ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ö‡∏¥‡∏• (Order #{detailData.details.order_id})
                        </h1>
                        <div className="details-grid">
                            <div className="detail-card">
                                <h2 className="card-title">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</h2>
                                <div className="card-content">
                                    <p><strong>Payment ID:</strong> {detailData.details.payment_id}</p>
                                    <p><strong>‡πÇ‡∏ï‡πä‡∏∞:</strong> {detailData.details.table_number}</p>
                                    <p><strong>‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏ï‡πä‡∏∞:</strong> {formatDateTime(detailData.details.start_time, 'medium')}</p>
                                    <p><strong>‡πÄ‡∏ß‡∏•‡∏≤‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô:</strong> {formatDateTime(detailData.details.payment_time, 'medium')}</p>
                                    <p><strong>‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á:</strong> {detailData.details.payment_method || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</p>
                                    <p className="total-price">
                                        <strong>‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°:</strong>
                                        <span>{Number(detailData.details.total_price).toLocaleString('th-TH', { minimumFractionDigits: 2 })} ‡∏ö‡∏≤‡∏ó</span>
                                    </p>
                                </div>
                            </div>
                            <div className="detail-card">
                                <h2 className="card-title">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå</h2>
                                <div className="card-content">
                                    <p><strong>‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£:</strong> {detailData.details.service_type}</p>
                                    <p><strong>‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô:</strong> {detailData.details.plan_name}</p>
                                    <p><strong>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤:</strong> {detailData.details.customer_quantity} ‡∏Ñ‡∏ô</p>
                                </div>
                            </div>
                        </div>
                        <div className="detail-card menu-items-card">
                            <h2 className="card-title">‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á</h2>
                            <div className="card-content">
                                {detailData.menuItems.length > 0 ? (
                                    <ul className="menu-list">
                                        {detailData.menuItems.map((item, index) => (
                                            <li key={index} className="menu-item">
                                                <span className="menu-name">{item.menu_name}</span>
                                                <span className="menu-qty">x{item.quantity}</span>
                                                <span className="menu-price">
                                                    {(Number(item.price_per_item) * item.quantity).toLocaleString('th-TH')} ‡∏ö‡∏≤‡∏ó
                                                </span>
                                            </li>
                                        ))}
                                    </ul>
                                ) : (
                                    <p style={{padding: '1rem'}}>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°</p>
                                )}
                            </div>
                        </div>
                    </>
                )}
            </div>
        );
    }

    return null; // Fallback
};

export default PaymentPage;